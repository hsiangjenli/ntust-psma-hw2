window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"graph_algo": {"fullname": "graph_algo", "modulename": "graph_algo", "kind": "module", "doc": "<h1 id=\"practice-of-social-media-analytics-cs5128701\"><strong>Practice of Social Media Analytics CS5128701</strong></h1>\n\n<p>This is a code written for the <strong><em>Practice of Social Media Analytics</em></strong> course.  </p>\n\n<p>The code was written by <a href=\"https://github.com/hsiangjenli\">@\u674e\u4eab\u7d1d - Hsiang-Jen Li</a>, but there is no guarantee that all algorithms are error-free. Therefore, users need to assume their own risk when using these code.</p>\n\n<h2 id=\"project-structure\"><strong>Project structure</strong></h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"l l-Scalar l-Scalar-Plain\">.</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./README.md</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./by_cn.ipynb</span><span class=\"w\"> </span><span class=\"c1\"># \u6e2c\u8a66</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./by_deep_cn.ipynb</span><span class=\"w\"> </span><span class=\"c1\"># \u6e2c\u8a66</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./hw02.ipynb</span><span class=\"w\"> </span><span class=\"c1\"># \u6700\u7d42\u7248</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./networkX.ipynb</span><span class=\"w\"> </span><span class=\"c1\"># networkX \u76f4\u63a5\u4f7f\u7528\u5957\u4ef6</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./data</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u2502   \u251c\u2500\u2500 ./data/sampleSubmission.csv</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u2502   \u251c\u2500\u2500 ./data/test.csv</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u2502   \u2514\u2500\u2500 ./data/train.csv</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./docs</span><span class=\"w\"> </span><span class=\"c1\"># \u6587\u4ef6\u6a94</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./gen.sh</span><span class=\"w\"> </span><span class=\"c1\"># \u5efa\u7acb\u6587\u4ef6\u6a94\u7684 shell script</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">\u2514\u2500\u2500 ./graph_algo</span>\n<span class=\"w\">    </span><span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./graph_algo</span><span class=\"w\"> </span><span class=\"c1\"># \u672c\u6b21\u64b0\u5beb\u7684\u6f14\u7b97\u6cd5</span>\n<span class=\"w\">        </span><span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./graph_algo/graph_algo/base.py</span>\n<span class=\"w\">        </span><span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./graph_algo/graph_algo/graph.py</span>\n<span class=\"w\">        </span><span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./graph_algo/graph_algo/pipeline.py</span>\n<span class=\"w\">        </span><span class=\"l l-Scalar l-Scalar-Plain\">\u251c\u2500\u2500 ./graph_algo/graph_algo/score_func.py</span>\n<span class=\"w\">        </span><span class=\"l l-Scalar l-Scalar-Plain\">\u2514\u2500\u2500 ./graph_algo/graph_algo/sparsification.py</span>\n</code></pre>\n</div>\n\n<h2 id=\"create-documentation-from-source-code\"><strong>Create documentation from source code</strong></h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nv\">IMAGE</span><span class=\"o\">=</span>https://hsiangjenli.github.io/hsiangjenli/static/image/ntust.png\npdoc<span class=\"w\"> </span>graph_algo/graph_algo<span class=\"w\"> </span>-o<span class=\"w\"> </span>./docs<span class=\"w\"> </span>--favicon<span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"nv\">$IMAGE</span><span class=\"s2\">&quot;</span><span class=\"w\"> </span>--logo<span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"nv\">$IMAGE</span><span class=\"s2\">&quot;</span><span class=\"w\"> </span>--docformat<span class=\"w\"> </span><span class=\"s2\">&quot;numpy&quot;</span>\n</code></pre>\n</div>\n\n<h1 id=\"report\"><strong>Report</strong></h1>\n\n<h2 id=\"what-is-new\"><strong>What is new?</strong></h2>\n\n<ol>\n<li>deep_common_neighbors</li>\n<li>deep_neighbors</li>\n<li>deep_jaccard_coefficient</li>\n</ol>\n\n<h2 id=\"10-experiment\"><strong>10 Experiment</strong></h2>\n\n<h3 id=\"e1-networkx-networkxipynb\"><strong>E1-networkX <code>networkX.ipynb</code></strong></h3>\n\n<blockquote>\n  <p><strong>Concept</strong>  </p>\n  \n  <ul>\n  <li>I tested the <code>greedy_modularity_communities</code> function in networkX to address my concerns about the effectiveness of my own algorithm implementation.</li>\n  <li>The actual results were unsatisfactory, leading me to speculate that using this method for community detection may result in overly fine-grained partitions.</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"e2-e4-hw02ipynb\"><strong>E2 ~ E4 <code>hw02.ipynb</code></strong></h3>\n\n<ol>\n<li>E2-deep_common_neighbor-level-1</li>\n<li>E3-deep_common_neighbor-level-2</li>\n<li>E4-deep_common_neighbor-level-3</li>\n</ol>\n\n<blockquote>\n  <p><strong>Concept</strong>\n  If two nodes recursively search for common neighbors within (1, 2, 3) levels, it implies that they are likely to be in the same community, as they will be connected within six steps.</p>\n</blockquote>\n\n<h3 id=\"e5-e7-hw02ipynb\"><strong>E5 ~ E7 <code>hw02.ipynb</code></strong></h3>\n\n<ol>\n<li>E5-deep_jaccard_coefficient-level-1-threshold-mean</li>\n<li>E6-deep_jaccard_coefficient-level-2-threshold-mean</li>\n<li>E7-deep_jaccard_coefficient-level-3-threshold-mean</li>\n</ol>\n\n<blockquote>\n  <p><strong>Concept</strong>  </p>\n  \n  <ul>\n  <li>Search for common neighbors between two nodes and <strong>consider the common neighbors and the size of their union neighbors</strong>, the Jaccard coefficient (JC) formula denominator, which is the union neighbor size, may cause the JC to decrease if both nodes have a large number of friends  </li>\n  <li>Additionally, I made a mistake in <strong>only calculating the average JC for the test data</strong>, rather than considering the <strong>average JC for all node combinations</strong>. However, due to computational limitations, I was unable to perform the latter calculation :)  </li>\n  </ul>\n</blockquote>\n\n<h3 id=\"e8-e10-hw02ipynb\"><strong>E8 ~ E10 <code>hw02.ipynb</code></strong></h3>\n\n<ol>\n<li>E8-deep_jaccard_coefficient-level-1-threshold-mean-minus-var</li>\n<li>E9-deep_jaccard_coefficient-level-2-threshold-mean-minus-var</li>\n<li>E10-deep_jaccard_coefficient-level-3-threshold-mean-minus-var</li>\n</ol>\n\n<blockquote>\n  <p><strong>Concept</strong>  </p>\n  \n  <ul>\n  <li>Same as above, the threshold is the average JC minus variance</li>\n  <li>Their still have mistake in my implementation.</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"summary-and-conclusion\"><strong>Summary and Conclusion</strong></h3>\n\n<table>\n<thead>\n<tr>\n  <th>Experiment</th>\n  <th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>E1-networkX</td>\n  <td>0.49</td>\n</tr>\n<tr>\n  <td>E2-deep_common_neighbor-level-1</td>\n  <td>0.7</td>\n</tr>\n<tr>\n  <td>E3-deep_common_neighbor-level-2</td>\n  <td>0.79333</td>\n</tr>\n<tr>\n  <td>E4-deep_common_neighbor-level-3</td>\n  <td>0.78</td>\n</tr>\n<tr>\n  <td>E5-deep_jaccard_coefficient-level-1-threshold-mean</td>\n  <td>0.67166</td>\n</tr>\n<tr>\n  <td>E6-deep_jaccard_coefficient-level-2-threshold-mean</td>\n  <td>0.69166</td>\n</tr>\n<tr>\n  <td>E7-deep_jaccard_coefficient-level-3-threshold-mean</td>\n  <td>0.705</td>\n</tr>\n<tr>\n  <td>E8-deep_jaccard_coefficient-level-1-threshold-mean-minus-var</td>\n  <td>0.68333</td>\n</tr>\n<tr>\n  <td>E9-deep_jaccard_coefficient-level-2-threshold-mean-minus-var</td>\n  <td>0.71666</td>\n</tr>\n<tr>\n  <td>E10-deep_jaccard_coefficient-level-3-threshold-mean-minus-var</td>\n  <td>0.75666</td>\n</tr>\n</tbody>\n</table>\n\n<p>I initially intended to use an algorithm similar to \"greedy_modularity_communities\" in networkX for my homework. </p>\n\n<p>However, after actually doing it, I found that the results were not satisfactory and the compute time was too long (about 12 hours). </p>\n\n<p>Later on, I realized that this assignment only focuses on node1 and node2. So, I changed my approach and considered only node1 and node2, which greatly improved the final result.</p>\n"}, "graph_algo.base": {"fullname": "graph_algo.base", "modulename": "graph_algo.base", "kind": "module", "doc": "<p></p>\n"}, "graph_algo.base.nodeId": {"fullname": "graph_algo.base.nodeId", "modulename": "graph_algo.base", "qualname": "nodeId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.base.graph": {"fullname": "graph_algo.base.graph", "modulename": "graph_algo.base", "qualname": "graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.base.if_node_not_exist": {"fullname": "graph_algo.base.if_node_not_exist", "modulename": "graph_algo.base", "qualname": "if_node_not_exist", "kind": "function", "doc": "<blockquote>\n  <p>Error handling for the node does not exist.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">default_return</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.base.BaseGraph": {"fullname": "graph_algo.base.BaseGraph", "modulename": "graph_algo.base", "qualname": "BaseGraph", "kind": "class", "doc": "<p></p>\n"}, "graph_algo.base.BaseGraph.add_edge": {"fullname": "graph_algo.base.BaseGraph.add_edge", "modulename": "graph_algo.base", "qualname": "BaseGraph.add_edge", "kind": "function", "doc": "<h2 id=\"add_edge\"><strong>add_edge</strong></h2>\n\n<blockquote>\n  <p>Create an edge between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.base.BaseGraph.get_nodes": {"fullname": "graph_algo.base.BaseGraph.get_nodes", "modulename": "graph_algo.base", "qualname": "BaseGraph.get_nodes", "kind": "variable", "doc": "<h2 id=\"get_nodes\"><strong>get_nodes</strong></h2>\n\n<blockquote>\n  <p>Get all nodes of the graph.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of node ids of the nodes.</li>\n</ul>\n", "annotation": ": list"}, "graph_algo.base.BaseGraph.get_average_degree": {"fullname": "graph_algo.base.BaseGraph.get_average_degree", "modulename": "graph_algo.base", "qualname": "BaseGraph.get_average_degree", "kind": "variable", "doc": "<h2 id=\"get_average_degree\"><strong>get_average_degree</strong></h2>\n\n<blockquote>\n  <p>Get the average degree of the graph.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The average degree of the graph.</li>\n</ul>\n"}, "graph_algo.base.BaseGraph.get_neighbors_size": {"fullname": "graph_algo.base.BaseGraph.get_neighbors_size", "modulename": "graph_algo.base", "qualname": "BaseGraph.get_neighbors_size", "kind": "function", "doc": "<h2 id=\"get_neighbors_size\"><strong>get_neighbors_size</strong></h2>\n\n<blockquote>\n  <p>Get the size of a node.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (nodeId):\nA node id of the node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The size of the node.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.base.BaseGraph.get_neighbors": {"fullname": "graph_algo.base.BaseGraph.get_neighbors", "modulename": "graph_algo.base", "qualname": "BaseGraph.get_neighbors", "kind": "function", "doc": "<h2 id=\"get_neighbors\"><strong>get_neighbors</strong></h2>\n\n<blockquote>\n  <p>Get all neighbors of a node.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (nodeId):\nA node id of the node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of node ids of the neighbors.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "graph_algo.graph": {"fullname": "graph_algo.graph", "modulename": "graph_algo.graph", "kind": "module", "doc": "<p></p>\n"}, "graph_algo.graph.Graph": {"fullname": "graph_algo.graph.Graph", "modulename": "graph_algo.graph", "qualname": "Graph", "kind": "class", "doc": "<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_nodes</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_average_degree</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">2.0</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_neighbors</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_neighbors_size</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n</code></pre>\n</div>\n", "bases": "graph_algo.base.BaseGraph"}, "graph_algo.graph.Graph.common_neighbors": {"fullname": "graph_algo.graph.Graph.common_neighbors", "modulename": "graph_algo.graph", "qualname": "Graph.common_neighbors", "kind": "function", "doc": "<h2 id=\"common-neighbors\"><strong>Common Neighbors</strong></h2>\n\n<blockquote>\n  <p>Calculate the common neighbors score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The common neighbors score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print(graph.common_neighbors(1, 2))</span>\n<span class=\"c1\"># &gt;&gt;&gt; 1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.deep_neighbors": {"fullname": "graph_algo.graph.Graph.deep_neighbors", "modulename": "graph_algo.graph", "qualname": "Graph.deep_neighbors", "kind": "function", "doc": "<h2 id=\"new-deep-neighbors\"><strong>\u2605 [new!!!] Deep Neighbors</strong></h2>\n\n<blockquote>\n  <p>Using recursion to get all neighbors of a node in a specific level.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (nodeId):\nA node id of the node.</li>\n<li><strong>cur_level</strong> (int, optional):\nCurrent level of the node, used in the recursion, DO NOT SET THIS ARG, by default 1</li>\n<li><strong>stop_level</strong> (int, optional):\nThe level to stop the recursion, by default 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of node ids of the neighbors.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.deep_common_neighbors": {"fullname": "graph_algo.graph.Graph.deep_common_neighbors", "modulename": "graph_algo.graph", "qualname": "Graph.deep_common_neighbors", "kind": "function", "doc": "<h2 id=\"new-deep-common-neighbors\"><strong>\u2605 [new!!!] Deep Common Neighbors</strong></h2>\n\n<blockquote>\n  <p>Return the common neighbors of two nodes in a specific level.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n<li><strong>stop_level</strong> (int, optional):\nThe level to stop the recursion, by default 3, by default 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Return the common neighbors of two nodes in a specific level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">stop_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.jaccard_coefficient": {"fullname": "graph_algo.graph.Graph.jaccard_coefficient", "modulename": "graph_algo.graph", "qualname": "Graph.jaccard_coefficient", "kind": "function", "doc": "<h2 id=\"jaccard-coefficient\"><strong>Jaccard Coefficient</strong></h2>\n\n<blockquote>\n  <p>Calculate the Jaccard coefficient score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The Jaccard coefficient score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">jaccard_coefficient</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">0.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"fullname": "graph_algo.graph.Graph.deep_jaccard_coefficient", "modulename": "graph_algo.graph", "qualname": "Graph.deep_jaccard_coefficient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.adamic_adar": {"fullname": "graph_algo.graph.Graph.adamic_adar", "modulename": "graph_algo.graph", "qualname": "Graph.adamic_adar", "kind": "function", "doc": "<h2 id=\"adamic-adar\"><strong>Adamic-Adar</strong></h2>\n\n<blockquote>\n  <p>Calculate the Adamic-Adar score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The Adamic-Adar score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">adamic_adar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">0.7213475204444817</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.shortest_path": {"fullname": "graph_algo.graph.Graph.shortest_path", "modulename": "graph_algo.graph", "qualname": "Graph.shortest_path", "kind": "function", "doc": "<h2 id=\"shortest-path\"><strong>Shortest Path</strong></h2>\n\n<blockquote>\n  <p>Calculate the shortest path score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The shortest path score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">shortest_path</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.katz_score": {"fullname": "graph_algo.graph.Graph.katz_score", "modulename": "graph_algo.graph", "qualname": "Graph.katz_score", "kind": "function", "doc": "<h2 id=\"katz-score\"><strong>Katz Score</strong></h2>\n\n<blockquote>\n  <p>Calculate the Katz score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The Katz score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">katz_score</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">1.6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.graph.Graph.preferential_attachment": {"fullname": "graph_algo.graph.Graph.preferential_attachment", "modulename": "graph_algo.graph", "qualname": "Graph.preferential_attachment", "kind": "function", "doc": "<h2 id=\"preferential-attachment\"><strong>Preferential Attachment</strong></h2>\n\n<blockquote>\n  <p>Calculate the preferential attachment score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The preferential attachment score between two nodes.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>```python\ngraph = Graph()</p>\n\n<p>graph.add_edge(1, 2)\ngraph.add_edge(1, 4)\ngraph.add_edge(4, 3)\ngraph.add_edge(4, 2)</p>\n\n<p>print(graph.preferential_attachment(1, 4))</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "graph_algo.pipeline": {"fullname": "graph_algo.pipeline", "modulename": "graph_algo.pipeline", "kind": "module", "doc": "<p></p>\n"}, "graph_algo.pipeline.ScoreFuncPipeline": {"fullname": "graph_algo.pipeline.ScoreFuncPipeline", "modulename": "graph_algo.pipeline", "qualname": "ScoreFuncPipeline", "kind": "class", "doc": "<p></p>\n"}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"fullname": "graph_algo.pipeline.ScoreFuncPipeline.__init__", "modulename": "graph_algo.pipeline", "qualname": "ScoreFuncPipeline.__init__", "kind": "function", "doc": "<h2 id=\"score-function-pipeline\"><strong>Score Function Pipeline</strong></h2>\n\n<blockquote>\n  <p>A pipeline for calculating the score of the graph</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**socre_func</strong> (dict):\nThe key is the name of the score function, and the value is the score function.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">cal_neighbors_size</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_neighbors_size</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">&quot;node1&quot;</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cal_common_neighbors</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">common_neighbors</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">&quot;node1&quot;</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">&quot;node2&quot;</span><span class=\"p\">])</span>\n\n<span class=\"n\">socre_func</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;out&quot;</span><span class=\"p\">:</span> <span class=\"n\">cal_neighbors_size</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;common_neighbors&quot;</span><span class=\"p\">:</span> <span class=\"n\">cal_common_neighbors</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">ScoreFuncPipeline</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">socre_func</span><span class=\"p\">)</span>\n<span class=\"n\">sc_train</span><span class=\"p\">,</span> <span class=\"n\">sc_test</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">df_train</span><span class=\"o\">=</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">df_test</span><span class=\"o\">=</span><span class=\"n\">test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">socre_func</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"fullname": "graph_algo.pipeline.ScoreFuncPipeline.transform", "modulename": "graph_algo.pipeline", "qualname": "ScoreFuncPipeline.transform", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>graph</strong> (dict):\n_description_</li>\n<li><strong>**kwargs</strong> (dict):\n<ol>\n<li>If the key of kwargs starts with <code>df_</code>, it will be considered as a dataframe, and will be transformed by the score function.  </li>\n<li>Otherwise, it will be passed as a parameter to the score function.</li>\n</ol></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[pd.DataFrame]</strong>: return a list of transformed dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"fullname": "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score", "modulename": "graph_algo.pipeline", "qualname": "ScoreFuncPipeline.cal_func_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func": {"fullname": "graph_algo.score_func", "modulename": "graph_algo.score_func", "kind": "module", "doc": "<p></p>\n"}, "graph_algo.score_func.CommonNeighbors": {"fullname": "graph_algo.score_func.CommonNeighbors", "modulename": "graph_algo.score_func", "qualname": "CommonNeighbors", "kind": "class", "doc": "<h2 id=\"common-neighbors\"><strong>Common neighbors</strong></h2>\n"}, "graph_algo.score_func.CommonNeighbors.func": {"fullname": "graph_algo.score_func.CommonNeighbors.func", "modulename": "graph_algo.score_func", "qualname": "CommonNeighbors.func", "kind": "function", "doc": "<blockquote>\n  <p>Calculate the common neighbors score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The common neighbors score between two nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func.JaccardCoefficient": {"fullname": "graph_algo.score_func.JaccardCoefficient", "modulename": "graph_algo.score_func", "qualname": "JaccardCoefficient", "kind": "class", "doc": "<h2 id=\"jaccard-coefficient\"><strong>Jaccard coefficient</strong></h2>\n"}, "graph_algo.score_func.JaccardCoefficient.func": {"fullname": "graph_algo.score_func.JaccardCoefficient.func", "modulename": "graph_algo.score_func", "qualname": "JaccardCoefficient.func", "kind": "function", "doc": "<blockquote>\n  <p>Calculate the Jaccard coefficient score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The Jaccard coefficient score between two nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func.DeepJaccardCoefficient": {"fullname": "graph_algo.score_func.DeepJaccardCoefficient", "modulename": "graph_algo.score_func", "qualname": "DeepJaccardCoefficient", "kind": "class", "doc": "<h2 id=\"deep-jaccard-coefficient\"><strong>Deep Jaccard coefficient</strong></h2>\n"}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"fullname": "graph_algo.score_func.DeepJaccardCoefficient.func", "modulename": "graph_algo.score_func", "qualname": "DeepJaccardCoefficient.func", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n<li><strong>max_depth</strong> (int, optional):\nThe maximum depth of the search, by default 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Jaccard coefficient score between two nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func.AdamicAdar": {"fullname": "graph_algo.score_func.AdamicAdar", "modulename": "graph_algo.score_func", "qualname": "AdamicAdar", "kind": "class", "doc": "<h2 id=\"adamic-adar\"><strong>Adamic-Adar</strong></h2>\n"}, "graph_algo.score_func.AdamicAdar.func": {"fullname": "graph_algo.score_func.AdamicAdar.func", "modulename": "graph_algo.score_func", "qualname": "AdamicAdar.func", "kind": "function", "doc": "<blockquote>\n  <p>Calculate the Adamic-Adar score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The Adamic-Adar score between two nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func.ShortestPath": {"fullname": "graph_algo.score_func.ShortestPath", "modulename": "graph_algo.score_func", "qualname": "ShortestPath", "kind": "class", "doc": "<h2 id=\"shortest-path\"><strong>Shortest path</strong></h2>\n"}, "graph_algo.score_func.ShortestPath.func": {"fullname": "graph_algo.score_func.ShortestPath.func", "modulename": "graph_algo.score_func", "qualname": "ShortestPath.func", "kind": "function", "doc": "<blockquote>\n  <p>Calculate the shortest path score between two nodes.</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The shortest path score between two nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "graph_algo.score_func.KatzScore": {"fullname": "graph_algo.score_func.KatzScore", "modulename": "graph_algo.score_func", "qualname": "KatzScore", "kind": "class", "doc": "<h2 id=\"katz-score\"><strong>Katz score</strong></h2>\n"}, "graph_algo.score_func.KatzScore.func": {"fullname": "graph_algo.score_func.KatzScore.func", "modulename": "graph_algo.score_func", "qualname": "KatzScore.func", "kind": "function", "doc": "<blockquote>\n  <p>Calculate the Katz score between two nodes.</p>\n</blockquote>\n\n<ol>\n<li>Measure the relative degree of influence of an actor (or node) within a social network</li>\n<li>Measures influence by taking into account the <strong>total number of walks between a pair of actors</strong></li>\n</ol>\n\n<h6 id=\"similar\">Similar</h6>\n\n<ol>\n<li>PageRank</li>\n<li>Eigenvector centrality</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node1</strong> (nodeId):\nA node id of the first node.</li>\n<li><strong>node2</strong> (nodeId):\nA node id of the second node.</li>\n<li><strong>alpha</strong> (float):\nAttenuation factor. \u8870\u6e1b\u4fc2\u6578\uff0c\u7528\u4f86\u63a7\u5236\u9060\u8fd1\u7684\u5f71\u97ff\u529b\uff0c\u901a\u5e38\u4ecb\u65bc 0~1 \u4e4b\u9593\nConnections made with distant neighbors are, however, penalized by an attenuation factor <em>alpha</em>. Each path or connection between a pair of nodes is assigned a weight determined by <em>alpha</em> and the distance between nodes</li>\n<li><strong>beta</strong> (float, optional):\nWeight attributed to the immediate neighborhood, by default 1</li>\n<li><strong>max_length</strong> (int, optional):</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<ol>\n<li><a href=\"https://www.geeksforgeeks.org/katz-centrality-centrality-measure/\">Katz Centrality (Centrality Measure) - GeeksforGeeks</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/456679785\">katz\u548ceigenvector \u4e2d\u5fc3\u6027</a></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">node2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"fullname": "graph_algo.score_func.KatzScore.get_all_possible_path", "modulename": "graph_algo.score_func", "qualname": "KatzScore.get_all_possible_path", "kind": "function", "doc": "<p>Get all possible path from start node to other nodes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong> (nodeId):\nA node id of the start node.</li>\n<li><strong>max_length</strong> (int):\nThe max length of the path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: A list of all possible path.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NewType</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">new_type</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "graph_algo.sparsification": {"fullname": "graph_algo.sparsification", "modulename": "graph_algo.sparsification", "kind": "module", "doc": "<p></p>\n"}, "graph_algo.sparsification.DegreeBased": {"fullname": "graph_algo.sparsification.DegreeBased", "modulename": "graph_algo.sparsification", "qualname": "DegreeBased", "kind": "class", "doc": "<h2 id=\"degreebased\"><strong>DegreeBased</strong></h2>\n"}, "graph_algo.sparsification.DegreeBased.__init__": {"fullname": "graph_algo.sparsification.DegreeBased.__init__", "modulename": "graph_algo.sparsification", "qualname": "DegreeBased.__init__", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>graph</strong> (dict):\nThe graph to be sparsified</li>\n<li><strong>degree</strong> (int or list):\nThe degree to be sparsified. The type of degree can be int or list. If the type is int, then the graph will be sparsified by the degree. If the type is list, then the graph will be sparsified by the degree in the list.</li>\n<li><strong>operation</strong> (_type_, optional):\nThe operation to be used to remove the node by degree, by default operator.gt</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">DegreeBased</span>\n<span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">sparsified_graph</span> <span class=\"o\">=</span> <span class=\"n\">DegreeBased</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sparsified_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">operation</span><span class=\"o\">=&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">gt</span><span class=\"o\">&gt;</span></span>)</span>"}, "graph_algo.sparsification.DegreeBased.sparsify": {"fullname": "graph_algo.sparsification.DegreeBased.sparsify", "modulename": "graph_algo.sparsification", "qualname": "DegreeBased.sparsify", "kind": "function", "doc": "<p>Sparsify the graph by degree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "graph_algo.sparsification.DegreeBased.fit": {"fullname": "graph_algo.sparsification.DegreeBased.fit", "modulename": "graph_algo.sparsification", "qualname": "DegreeBased.fit", "kind": "function", "doc": "<p>return the sparsified graph</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "graph_algo.sparsification.RandomWalk": {"fullname": "graph_algo.sparsification.RandomWalk", "modulename": "graph_algo.sparsification", "qualname": "RandomWalk", "kind": "class", "doc": "<h2 id=\"randomwalk\"><strong>RandomWalk</strong></h2>\n"}, "graph_algo.sparsification.RandomWalk.fit": {"fullname": "graph_algo.sparsification.RandomWalk.fit", "modulename": "graph_algo.sparsification", "qualname": "RandomWalk.fit", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>graph</strong> (dict):\nThe graph to be sparsified</li>\n<li><strong>node1_dropout</strong> (float, optional):\nThe percentage of node1 to be dropped out, by default 0.1</li>\n<li><strong>neighbor_dropout</strong> (float, optional):\nThe percentage of neighbor to be dropped out, if the dropout size is 0, then make it 1, by default 0.1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The sparsified graph</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">RandomWalk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">core</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">sparsified_graph</span> <span class=\"o\">=</span> <span class=\"n\">RandomWalk</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">node1_dropout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">neighbor_dropout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sparsified_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">node1_dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">neighbor_dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"graph_algo": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 1066}, "graph_algo.base": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.base.nodeId": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "graph_algo.base.graph": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "graph_algo.base.if_node_not_exist": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 15}, "graph_algo.base.BaseGraph": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.base.BaseGraph.add_edge": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 56}, "graph_algo.base.BaseGraph.get_nodes": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 40}, "graph_algo.base.BaseGraph.get_average_degree": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 40}, "graph_algo.base.BaseGraph.get_neighbors_size": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 59}, "graph_algo.base.BaseGraph.get_neighbors": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 61}, "graph_algo.graph": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.graph.Graph": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 275}, "graph_algo.graph.Graph.common_neighbors": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 203}, "graph_algo.graph.Graph.deep_neighbors": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 114}, "graph_algo.graph.Graph.deep_common_neighbors": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 109}, "graph_algo.graph.Graph.jaccard_coefficient": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 225}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "graph_algo.graph.Graph.adamic_adar": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 225}, "graph_algo.graph.Graph.shortest_path": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 224}, "graph_algo.graph.Graph.katz_score": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 246}, "graph_algo.graph.Graph.preferential_attachment": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 119}, "graph_algo.pipeline": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.pipeline.ScoreFuncPipeline": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 334}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 91}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 3}, "graph_algo.score_func": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.score_func.CommonNeighbors": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "graph_algo.score_func.CommonNeighbors.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 72}, "graph_algo.score_func.JaccardCoefficient": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "graph_algo.score_func.JaccardCoefficient.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 72}, "graph_algo.score_func.DeepJaccardCoefficient": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 79}, "graph_algo.score_func.AdamicAdar": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "graph_algo.score_func.AdamicAdar.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 72}, "graph_algo.score_func.ShortestPath": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "graph_algo.score_func.ShortestPath.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 72}, "graph_algo.score_func.KatzScore": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "graph_algo.score_func.KatzScore.func": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 204}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 69}, "graph_algo.sparsification": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "graph_algo.sparsification.DegreeBased": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "graph_algo.sparsification.DegreeBased.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 431}, "graph_algo.sparsification.DegreeBased.sparsify": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "graph_algo.sparsification.DegreeBased.fit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 6}, "graph_algo.sparsification.RandomWalk": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "graph_algo.sparsification.RandomWalk.fit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 429}}, "length": 48, "save": true}, "index": {"qualname": {"root": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.nodeId": {"tf": 1}}, "df": 1}}, "s": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 5}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.base.graph": {"tf": 1}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 11}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.base.BaseGraph": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}}, "df": 6}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}}, "df": 4}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 3, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}}, "df": 2}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "z": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 3}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "fullname": {"root": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base": {"tf": 1}, "graph_algo.base.nodeId": {"tf": 1}, "graph_algo.base.graph": {"tf": 1.4142135623730951}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.base.BaseGraph": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.7320508075688772}, "graph_algo.pipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func": {"tf": 1}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification": {"tf": 1}, "graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 48}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base": {"tf": 1}, "graph_algo.base.nodeId": {"tf": 1}, "graph_algo.base.graph": {"tf": 1}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.base.BaseGraph": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph": {"tf": 1}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func": {"tf": 1}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification": {"tf": 1}, "graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 48}}, "l": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base": {"tf": 1}, "graph_algo.base.nodeId": {"tf": 1}, "graph_algo.base.graph": {"tf": 1}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.base.BaseGraph": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}}, "df": 10, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.base.BaseGraph": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}}, "df": 6}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.nodeId": {"tf": 1}}, "df": 1}}, "s": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 5}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}}, "df": 4}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 3, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}}, "df": 2}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func": {"tf": 1}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 16, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.sparsification": {"tf": 1}, "graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 7}}}}}}}, "y": {"docs": {"graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 5}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "z": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 3}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func": {"tf": 1}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "annotation": {"root": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}}, "df": 1}}}}}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 2}, "1": {"0": {"0": {"0": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 3}, "2": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 1}, "3": {"docs": {"graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 1}, "6": {"docs": {"graph_algo.score_func.ShortestPath.func": {"tf": 1}}, "df": 1}, "docs": {"graph_algo.base.nodeId": {"tf": 3.1622776601683795}, "graph_algo.base.graph": {"tf": 3.1622776601683795}, "graph_algo.base.if_node_not_exist": {"tf": 3.7416573867739413}, "graph_algo.base.BaseGraph.add_edge": {"tf": 7.810249675906654}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 4.242640687119285}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 6}, "graph_algo.graph.Graph.common_neighbors": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 8.831760866327848}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.adamic_adar": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.shortest_path": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.katz_score": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 7.937253933193772}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 3.7416573867739413}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 5.0990195135927845}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 7.280109889280518}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 7.937253933193772}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 7.937253933193772}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 8.831760866327848}, "graph_algo.score_func.AdamicAdar.func": {"tf": 7.937253933193772}, "graph_algo.score_func.ShortestPath.func": {"tf": 8.831760866327848}, "graph_algo.score_func.KatzScore.func": {"tf": 10.295630140987}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 6.855654600401044}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 6.244997998398398}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 3.1622776601683795}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 3.4641016151377544}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 6.855654600401044}}, "df": 29, "x": {"docs": {"graph_algo.base.nodeId": {"tf": 1}, "graph_algo.base.graph": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 5}}}, "f": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}}, "df": 15}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"1": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 10}, "2": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 9}, "docs": {"graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 11, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 11}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 2}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.AdamicAdar.func": {"tf": 2}, "graph_algo.score_func.ShortestPath.func": {"tf": 2}, "graph_algo.score_func.KatzScore.func": {"tf": 2}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 12}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 11}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 12}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 2}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.AdamicAdar.func": {"tf": 2}, "graph_algo.score_func.ShortestPath.func": {"tf": 2}, "graph_algo.score_func.KatzScore.func": {"tf": 2}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}}, "df": 12}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 11}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}}, "df": 8}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1}}, "df": 10}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {"graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 7}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1.4142135623730951}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 4}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.graph.Graph": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo.graph.Graph": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.graph.Graph": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.graph.Graph": {"tf": 1}}, "df": 1}}}}}}}}}}}, "doc": {"root": {"0": {"docs": {"graph_algo": {"tf": 3.1622776601683795}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.23606797749979}}, "df": 6, "~": {"1": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "1": {"0": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "2": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.7320508075688772}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.6457513110645907}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 3.4641016151377544}}, "df": 12}, "2": {"docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.8284271247461903}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.23606797749979}}, "df": 11}, "3": {"9": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}}, "df": 1}, "docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph": {"tf": 2}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.7320508075688772}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.449489742783178}}, "df": 12}, "4": {"9": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2}}, "df": 5}, "5": {"docs": {"graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2}, "6": {"7": {"1": {"6": {"6": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"3": {"3": {"3": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"1": {"6": {"6": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}}, "df": 1}, "7": {"0": {"5": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"6": {"6": {"6": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"1": {"3": {"4": {"7": {"5": {"2": {"0": {"4": {"4": {"4": {"4": {"8": {"1": {"7": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"6": {"6": {"6": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "9": {"3": {"3": {"3": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"graph_algo": {"tf": 1}}, "df": 1}, "8": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}}, "df": 1}, "docs": {"graph_algo": {"tf": 21.93171219946131}, "graph_algo.base": {"tf": 1.7320508075688772}, "graph_algo.base.nodeId": {"tf": 1.7320508075688772}, "graph_algo.base.graph": {"tf": 1.7320508075688772}, "graph_algo.base.if_node_not_exist": {"tf": 2.6457513110645907}, "graph_algo.base.BaseGraph": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.add_edge": {"tf": 5.385164807134504}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 4.69041575982343}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 4.69041575982343}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 5.830951894845301}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 5.830951894845301}, "graph_algo.graph": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 14.45683229480096}, "graph_algo.graph.Graph.common_neighbors": {"tf": 11.532562594670797}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 6.708203932499369}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 6.782329983125268}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 12.409673645990857}, "graph_algo.graph.Graph.deep_jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 12.409673645990857}, "graph_algo.graph.Graph.shortest_path": {"tf": 12.409673645990857}, "graph_algo.graph.Graph.katz_score": {"tf": 13.152946437965905}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 7.14142842854285}, "graph_algo.pipeline": {"tf": 1.7320508075688772}, "graph_algo.pipeline.ScoreFuncPipeline": {"tf": 1.7320508075688772}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 15.132745950421556}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 6.4031242374328485}, "graph_algo.pipeline.ScoreFuncPipeline.cal_func_score": {"tf": 1.7320508075688772}, "graph_algo.score_func": {"tf": 1.7320508075688772}, "graph_algo.score_func.CommonNeighbors": {"tf": 2}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 6}, "graph_algo.score_func.JaccardCoefficient": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 6}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 2}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 6.164414002968976}, "graph_algo.score_func.AdamicAdar": {"tf": 2}, "graph_algo.score_func.AdamicAdar.func": {"tf": 6}, "graph_algo.score_func.ShortestPath": {"tf": 2}, "graph_algo.score_func.ShortestPath.func": {"tf": 6}, "graph_algo.score_func.KatzScore": {"tf": 2}, "graph_algo.score_func.KatzScore.func": {"tf": 9}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 5.656854249492381}, "graph_algo.sparsification": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased": {"tf": 2}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 16.881943016134134}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk": {"tf": 2}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 17.291616465790582}}, "df": 48, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph": {"tf": 2.23606797749979}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 2}}, "df": 1}}}}}}}}}}}, "y": {"docs": {"graph_algo": {"tf": 2.23606797749979}}, "df": 1, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1, "s": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 22}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 2}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.7320508075688772}}, "df": 5}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "f": {"docs": {"graph_algo": {"tf": 2.23606797749979}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 2}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 2.23606797749979}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.7320508075688772}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 2.6457513110645907}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 25}, "w": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}}, "df": 2}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.shortest_path": {"tf": 2}, "graph_algo.score_func.ShortestPath": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "c": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 15, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.449489742783178}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2}}, "df": 3}}}, "y": {"docs": {"graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 14}}}}, "t": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "x": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "z": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 5}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 3.4641016151377544}}, "df": 1}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "y": {"docs": {"graph_algo": {"tf": 2.23606797749979}}, "df": 1}, "a": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}, "x": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 2.6457513110645907}}, "df": 1}}}}}, "a": {"docs": {"graph_algo": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.7320508075688772}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 2.449489742783178}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}}, "df": 22, "n": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "d": {"docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}}, "df": 5}, "g": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 2.6457513110645907}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.7320508075688772}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}, "g": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 1}}, "s": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.8284271247461903}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.6457513110645907}}, "df": 10, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 2}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {"graph_algo.graph.Graph.adamic_adar": {"tf": 2}, "graph_algo.score_func.AdamicAdar": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}}, "df": 3}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 1}}, "df": 3}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.preferential_attachment": {"tf": 2}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "s": {"5": {"1": {"2": {"8": {"7": {"0": {"1": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "v": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 2}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 3.1622776601683795}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}}, "df": 6}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}, "y": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 3.7416573867739413}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 6}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 2}}, "df": 1}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 7}}}, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "l": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}}, "df": 1, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 11}}}}}}}, "n": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 2}}, "e": {"docs": {"graph_algo": {"tf": 4.47213595499958}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 2}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 2}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 2}, "graph_algo.graph.Graph.adamic_adar": {"tf": 2}, "graph_algo.graph.Graph.shortest_path": {"tf": 2}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2.6457513110645907}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.7320508075688772}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.AdamicAdar.func": {"tf": 2}, "graph_algo.score_func.ShortestPath.func": {"tf": 2}, "graph_algo.score_func.KatzScore.func": {"tf": 2.6457513110645907}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 3.4641016151377544}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.23606797749979}}, "df": 28, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "y": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "n": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 2.23606797749979}}, "df": 1}, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 3.605551275463989}}, "df": 1}}}}}}}}, "o": {"docs": {"graph_algo": {"tf": 3}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.7320508075688772}}, "df": 8, "o": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}}, "df": 1}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 2}}, "df": 1}}}}, "i": {"docs": {"graph_algo": {"tf": 2.6457513110645907}}, "df": 1, "s": {"docs": {"graph_algo": {"tf": 2.23606797749979}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 5}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {"graph_algo": {"tf": 2.8284271247461903}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 7}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {"graph_algo": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.7320508075688772}}, "df": 12, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "f": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 4}, "t": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 3}, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 18, "s": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 3}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "l": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 9}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.7320508075688772}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 14}}}, "t": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 2}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 9}, "u": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.449489742783178}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.7320508075688772}}, "df": 4, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 2}}, "df": 14}}}}, "a": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "w": {"0": {"2": {"docs": {"graph_algo": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 3.7416573867739413}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}}, "df": 6}}}}}}, "c": {"docs": {"graph_algo": {"tf": 2.23606797749979}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2}}, "df": 7, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"graph_algo": {"tf": 4.242640687119285}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 2.23606797749979}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}}, "df": 3, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "e": {"1": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.7320508075688772}}, "df": 17}, "2": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 16}, "docs": {"graph_algo": {"tf": 1}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.base.BaseGraph.add_edge": {"tf": 2}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 2.23606797749979}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 2.23606797749979}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 2.449489742783178}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 2}, "graph_algo.graph.Graph.adamic_adar": {"tf": 2}, "graph_algo.graph.Graph.shortest_path": {"tf": 2}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 2}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 2}, "graph_algo.score_func.AdamicAdar.func": {"tf": 2}, "graph_algo.score_func.ShortestPath.func": {"tf": 2}, "graph_algo.score_func.KatzScore.func": {"tf": 2.23606797749979}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 22, "s": {"docs": {"graph_algo": {"tf": 1.7320508075688772}, "graph_algo.base.BaseGraph.add_edge": {"tf": 1}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.7320508075688772}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 18}, "i": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.katz_score": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1.4142135623730951}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.ShortestPath.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 18}}}}, "t": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base.if_node_not_exist": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1, "x": {"docs": {"graph_algo": {"tf": 2.6457513110645907}}, "df": 1}}}}}}, "w": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 2.6457513110645907}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"graph_algo": {"tf": 2.449489742783178}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2.6457513110645907}, "graph_algo.score_func.CommonNeighbors": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1.4142135623730951}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 11}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}, "t": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1.4142135623730951}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph": {"tf": 2}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo": {"tf": 2.8284271247461903}, "graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph": {"tf": 3.1622776601683795}, "graph_algo.graph.Graph.common_neighbors": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph.adamic_adar": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph.shortest_path": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph.katz_score": {"tf": 2.6457513110645907}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2.6457513110645907}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2.23606797749979}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 4.358898943540674}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 4.123105625617661}}, "df": 16}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"graph_algo.graph.Graph": {"tf": 3.872983346207417}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 1.7320508075688772}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.7320508075688772}}, "df": 8}}, "e": {"1": {"0": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "3": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "4": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "5": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "6": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "7": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "8": {"docs": {"graph_algo": {"tf": 1.7320508075688772}}, "df": 1}, "9": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}, "graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 3, "s": {"docs": {"graph_algo.graph.Graph": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}}, "df": 7}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.add_edge": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.shortest_path": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 2}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.8284271247461903}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 2.6457513110645907}}, "df": 10, "s": {"docs": {"graph_algo.graph.Graph": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "d": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.sparsification.DegreeBased.fit": {"tf": 1}}, "df": 4, "s": {"docs": {"graph_algo.base.BaseGraph.get_nodes": {"tf": 1}, "graph_algo.base.BaseGraph.get_average_degree": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors_size": {"tf": 1}, "graph_algo.base.BaseGraph.get_neighbors": {"tf": 1}, "graph_algo.graph.Graph.common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.graph.Graph.jaccard_coefficient": {"tf": 1}, "graph_algo.graph.Graph.adamic_adar": {"tf": 1}, "graph_algo.graph.Graph.shortest_path": {"tf": 1}, "graph_algo.graph.Graph.katz_score": {"tf": 1}, "graph_algo.graph.Graph.preferential_attachment": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}, "graph_algo.score_func.CommonNeighbors.func": {"tf": 1}, "graph_algo.score_func.JaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.AdamicAdar.func": {"tf": 1}, "graph_algo.score_func.ShortestPath.func": {"tf": 1}, "graph_algo.score_func.KatzScore.get_all_possible_path": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1}}, "df": 20}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"graph_algo.sparsification.RandomWalk": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2.23606797749979}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"graph_algo": {"tf": 4.69041575982343}, "graph_algo.graph.Graph.deep_neighbors": {"tf": 1}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1}, "graph_algo.score_func.DeepJaccardCoefficient": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.base.BaseGraph.get_average_degree": {"tf": 1.7320508075688772}, "graph_algo.graph.Graph": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 2.6457513110645907}, "graph_algo.sparsification.DegreeBased.sparsify": {"tf": 1}}, "df": 5, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.sparsification.DegreeBased": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "f": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1.4142135623730951}, "graph_algo.graph.Graph.deep_common_neighbors": {"tf": 1.4142135623730951}, "graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"graph_algo.score_func.DeepJaccardCoefficient.func": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "o": {"docs": {"graph_algo.graph.Graph.deep_neighbors": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo": {"tf": 1.4142135623730951}}, "df": 1}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.base.if_node_not_exist": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}, "graph_algo.sparsification.DegreeBased.__init__": {"tf": 1}, "graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1.4142135623730951}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 2.23606797749979}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"graph_algo.sparsification.RandomWalk.fit": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"graph_algo": {"tf": 2.449489742783178}, "graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 3.1622776601683795}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo": {"tf": 2.449489742783178}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "z": {"docs": {"graph_algo.graph.Graph.katz_score": {"tf": 2}, "graph_algo.score_func.KatzScore": {"tf": 1}, "graph_algo.score_func.KatzScore.func": {"tf": 1.4142135623730951}}, "df": 3, "\u548c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"graph_algo.score_func.KatzScore.func": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 1}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"graph_algo.pipeline.ScoreFuncPipeline.__init__": {"tf": 2}, "graph_algo.pipeline.ScoreFuncPipeline.transform": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();